#include<stdlib.h>
#include<stdio.h>
#include<string.h>

//Structure for each person in org
struct Person {
    char name[50];
    struct Person *subordinates[10]; // Array to store pointers to subordinates ( I think they'd be children in tree terminology)
    int sub_count; // Num of subordinates
};


//This will be the func to add a subordinate
int addSubordinate (struct Person *manager, struct Person *subordinate) {
    manager->subordinates[manager->sub_count] = subordinate;
    manager->sub_count++;
    return 0;
}


//Func to print whole tree
void printOrgChart(struct Person *person, int level) {
    if (person == NULL) {
        return;
    }

    //basically this will print an indentation based on the level of the person
    for (int i = 0; i < level; i++) {
        printf("    "); 
    }

    // Print the person's name
    printf("%s\n", person->name);

    //print all subordinates using recursion
    for (int i = 0; i < person->sub_count; i++) {
        printOrgChart(person->subordinates[i], level + 1);
    }
}

void user_input(char *name, int *sub_count) {
    printf("Enter the name of the highest level manager: ");
    scanf("%s", name);  // Get name of the manager
    printf("How many subordinates does %s have: ", name);
    scanf("%d", sub_count);  // Get number of subordinates
}



int main() {
    struct Person manager;
    manager.sub_count = 0;

    // Get name and number of subbordinates from the user
    user_input(manager.name, &manager.sub_count);


    return 0;
}
