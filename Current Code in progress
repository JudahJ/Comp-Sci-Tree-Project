#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#define MAX_SUBORDINATES 10

//test

struct Person {
    char name[50];
    struct Person *subordinates[MAX_SUBORDINATES];
    int sub_count;
};

int addSubordinate(struct Person *manager, struct Person *subordinate) {
    if (manager->sub_count < MAX_SUBORDINATES) {
        manager->subordinates[manager->sub_count] = subordinate;
        manager->sub_count++;
        return 0;
    } else {
        printf("Cannot add more subordinates to %s\n", manager->name);
        exit(1);
    }
}


void printOrgChart(struct Person *person, int level) {
    //BASE CASE
    if (person == NULL) {
        return;
    }
    
    for (int i = 0; i < level; i++) {
        printf("    ");
    }
    printf("%sâ†“\n", person->name);
    //for loop to track which subordinate
    for (int i = 0; i < person->sub_count; i++) {
        printOrgChart(person->subordinates[i], level + 1);
    }
}

struct Person *Search_for_person(struct Person *manager, char *name) {
    if (strcmp(manager->name, name) == 0) {
        return manager;
    }

    for (int i = 0; i < manager->sub_count; i++) {
        struct Person *found;
        found = Search_for_person(manager->subordinates[i], name);
        if (found != NULL) {
            return found;
        }
    }
    return NULL;
}
//search for person and manager (in order to move)
struct Person *Search_person_manager(struct Person *manager, char *name, struct Person **found_manager) {
    if (strcmp(manager->name, name) == 0) { //same as search func
        return manager;
    }

    for (int i = 0; i < manager->sub_count; i++) {
        if (strcmp(manager->subordinates[i]->name, name) == 0) {//checks ahead for subordinate name match
            *found_manager = manager; 
            return manager->subordinates[i]; //still returns the person being searched for 
        }
        struct Person *found = Search_person_manager(manager->subordinates[i], name, found_manager);
        if (found != NULL) { 
            return found;
        }
    }
    return NULL;
}
//this function is for the moving of a person, not for a removal feature
int remove_person(struct Person *manager, struct Person *subordinate){
    for (int i = 0; i < manager->sub_count; i++) {
        if (manager->subordinates[i]==subordinate){
            for (int y = i; y<manager->sub_count-1; y++) {
                manager->subordinates[y]=manager->subordinates[y+1];
            }
            manager->subordinates[manager->sub_count-1] = NULL;
            manager->sub_count=manager->sub_count-1;
            return 0;
        }
    }
    printf("not found\n"); //if person to be moved isnt found
    return 1;
}

int move_person(struct Person *ceo, char *person_name, char *new_manager_name) {
    struct Person *current_manager = NULL;
    struct Person *moving = Search_person_manager(ceo, person_name, &current_manager); //finds person to move
    if (moving == NULL) {
        printf("employee not found: %s", person_name);
        return 1;
    }
    struct Person *new_manager = Search_for_person(ceo, new_manager_name); //finds manager to move them to
    if (new_manager == NULL) {
        printf("Manager not found: %s\n", new_manager_name);
        return 1;
    }
    if (current_manager != NULL) {
        remove_person(current_manager, moving); //takes moving person out from under current manager
    }
    addSubordinate(new_manager, moving); //adds them as a new subordinate under their new manager
    printf("Moved %s under new manager: %s\n", moving->name, new_manager->name);
    return 0;
}

//Func to create memory for the person and return a pointer to them
struct Person *createPerson(char *name) {
    struct Person *newPerson;
    newPerson = malloc(sizeof(struct Person));
    strcpy(newPerson->name, name);
    newPerson->sub_count = 0;
    return newPerson;
}

void quit(void){
    int farewell=rand() % 5;
    if (farewell==0){
        printf("\nAs you hear of me, so think of me.\n"
        "Go comfort your cousin. I must say she is dead, and so farewell.\n"
        "--Benedick, \033[3mMuch Ado About Nothing\033[0m\n");
    }
    else if (farewell==1){
        printf("\nFarewell the neighing steed, and the shrill trump,\n"
        "The spirit-stirring drum, th' ear-piercing fife,\n"
        "The royal banner, and all quality,\n"
        "Pride, pomp, and circumstance of glorious war!\n"
        "--Othello, \033[3mOthello\033[0m\n");
    }
    else if (farewell==2){
        printf("\nFarewell, farewell!\n"
        "If we should meet again, why, we shall smile;\n"
        "If not, why then, this parting was well made.\n"
        "--Brutus, \033[3mJulius Caesar\033[0m\n");
    }
    else if (farewell==3){
        printf("\nParting is such sweet sorrow,\n"
        "That I shall say good night till it be morrow.\n"
        "--Juliet, \033[3mRomeo and Juliet\033[0m\n");
    }
    else if (farewell==4){
        printf("\nAnd farewell, friends.\n"
        "Thus Thisbe ends.\n"
        "Adieu, adieu, adieu.\n"
        "--Flute (as Thisbe), \033[3mA Midsummer Night's Dream\033[0m\n");
    }
}

int main() 
{
    srand(time(NULL)); //initializes random function for if the user quits
    struct Person *ceo;

    char ceo_name[50];
    printf("Please enter the name of the highest level manager (CEO): ");
    scanf("%s", ceo_name);
    
    ceo = createPerson(ceo_name);

    while (1) {
        int wwyltd_choice; //WWYLTD = "what would you like to do"
        char subordinate_name[50];
        char manager_name[50];

        printf("\nWhat would you like to do? \n1. Add\n2. Search\n3. Move\n4. Print\n5. Quit\n");
        scanf("%d",&wwyltd_choice);

        if (wwyltd_choice==1){//if they input 1 (for "Add")
            printf("\nEnter the name of an employee: "); //get name of the subordinate 
            scanf("%s", subordinate_name);
            printf("Who does %s work for? ", subordinate_name); //get the person they work for
            scanf("%s", manager_name);

            //find the manager
            struct Person *manager = Search_for_person(ceo, manager_name);
            if (manager == NULL) {
                printf("Manager %s isn't in the organization\n", manager_name);
                continue;
            }

            //create subordinate and add them under the manager
            struct Person *subordinate = createPerson(subordinate_name);
            addSubordinate(manager, subordinate);

            printf("\nEmployee %s added under manager %s.\n",subordinate_name,manager_name);
            continue;
        }
        
        else if (wwyltd_choice==2){ //if they input 2 (for "Search")
            char name_to_search[50];
            printf("\nEnter the name of the person you want to search for: ");
            scanf("%s", name_to_search);

            struct Person *found_person = Search_for_person(ceo, name_to_search);
            if (found_person != NULL) {
                printf("\nEmployee %s found!\n", found_person->name);
            } else {
                printf("\nEmployee %s not found.\n", name_to_search);
            }
        }
        else if (wwyltd_choice==3){//if they input 3 (for "Move")
            char moving[50];
            char new_manager_name[50];
            printf("\nEnter the name of the person you want to move: ");
            scanf("%s", moving);

            printf("Enter the name of the new manager for %s: ", moving);
            scanf("%s", new_manager_name);

            move_person(ceo, moving, new_manager_name);
        }
        else if (wwyltd_choice == 4) { // if they input 4 (for "Print")
        char manager_name[50];
        printf("\nEnter the name of the manager whose division you want to print, or type '6' to print the whole chart: ");
        scanf("%s", manager_name);
        if (strcmp(manager_name, "6")==0){
            printf("\nOrg Chart:\n");
            printOrgChart(ceo, 0);
            
        } else {
            struct Person *manager = Search_for_person(ceo, manager_name);
        if (manager != NULL) {
            printf("\nDivision under %s:\n", manager->name);
            printOrgChart(manager, 0);
            } else {
            printf("\nManager %s not found.\n", manager_name);
            }
        }
        }
        
        
        else if (wwyltd_choice==5){
            quit();
            break;
        }
        else{
            printf("please input a number 1-5\n");
            while (getchar() != '\n');
            continue;
        }
    } 
    return 0;
}
