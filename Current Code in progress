#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MAX_SUBORDINATES 10

struct Person {
    char name[50];
    struct Person *subordinates[MAX_SUBORDINATES];
    int sub_count;
};

int addSubordinate(struct Person *manager, struct Person *subordinate) {
    if (manager->sub_count < MAX_SUBORDINATES) {
        manager->subordinates[manager->sub_count] = subordinate;
        manager->sub_count++;
        return 0;
    } else {
        printf("Cannot add more subordinates to %s\n", manager->name);
        exit(1);
    }
}

void printOrgChart(struct Person *person, int level) {
    //BASE CASE
    if (person == NULL) {
        return;
    }
    
    for (int i = 0; i < level; i++) {
        printf("    â†“");
    }
    printf("%s\n", person->name);
    //for loop to track which subordinate
    for (int i = 0; i < person->sub_count; i++) {
        printOrgChart(person->subordinates[i], level + 1);
    }
}

struct Person *Search_for_person(struct Person *manager, char *name) {
    if (strcmp(manager->name, name) == 0) {
        return manager;
    }

    for (int i = 0; i < manager->sub_count; i++) {
        struct Person *found;
        found = Search_for_person(manager->subordinates[i], name);
        if (found != NULL) {
            return found;
        }
    }
    return NULL;
}

//Func to create memory for the person and return a pointer to them
struct Person *createPerson(char *name) {
    struct Person *newPerson;
    newPerson = malloc(sizeof(struct Person));
    strcpy(newPerson->name, name);
    newPerson->sub_count = 0;
    return newPerson;
}

int main() {
    struct Person *ceo = NULL;
    
    char ceo_name[50];
    printf("Please enter the name of the highest level manager (CEO): ");
    scanf("%s", ceo_name);
    
    ceo = createPerson(ceo_name);

    while (1) {
        char subordinate_name[50];
        char manager_name[50];

        // Get name of the subordinate 
        printf("\nEnter the name of an employee or type 'done' to stop and print the chart: ");
        scanf("%s", subordinate_name);

        if (strcmp(subordinate_name, "done") == 0) {
            break;
        }

        // Get the person they work for
        printf("Who does %s work for? ", subordinate_name);
        scanf("%s", manager_name);

        //find the person
        struct Person *manager = Search_for_person(ceo, manager_name);
        if (manager == NULL) {
            printf("Manager %s isnn't in the organization\n", manager_name);
            continue;
        }

        // Create subordinate and add them to the manager
        struct Person *subordinate = createPerson(subordinate_name);
        addSubordinate(manager, subordinate);
    }

    // Print the chart
    printf("\nOrg Chart:\n");
    printOrgChart(ceo, 0);

    // Look for a person
    char name_to_search[50];
    printf("\nEnter the name of the person you want to search for: ");
    scanf("%s", name_to_search);

    struct Person *found_person = Search_for_person(ceo, name_to_search);
    if (found_person != NULL) {
        printf("\nEmployee %s found!\n", found_person->name);
    } else {
        printf("\nEmployee %s not found.\n", name_to_search);
    }

    return 0;
}

